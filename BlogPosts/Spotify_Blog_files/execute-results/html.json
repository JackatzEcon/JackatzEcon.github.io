{
  "hash": "947b37ae023295b820568a0bdf70e736",
  "result": {
    "markdown": "---\ntitle: \"Spotify Artist Dataset\"\neditor: visual\nabout: \n  template: jolla\n  image: BlogPosts/Spotify_Blog_files/Spotify_Blog_files/Drake.png\n  image-shape: round\n  image-width: 15em \n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(skimr)\nlibrary(ggthemes)\n```\n:::\n\n\n## Loading in Data set\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspotify_all <- read_csv('https://bcdanl.github.io/data/spotify_all.csv')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 198005 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): playlist_name, artist_name, track_name, album_name\ndbl (3): pid, pos, duration_ms\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nspotify_all\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 198,005 × 7\n     pid playlist_name   pos artist_name       track_name duration_ms album_name\n   <dbl> <chr>         <dbl> <chr>             <chr>            <dbl> <chr>     \n 1     0 Throwbacks        0 Missy Elliott     Lose Cont…      226863 The Cookb…\n 2     0 Throwbacks        1 Britney Spears    Toxic           198800 In The Zo…\n 3     0 Throwbacks        2 Beyoncé           Crazy In …      235933 Dangerous…\n 4     0 Throwbacks        3 Justin Timberlake Rock Your…      267266 Justified \n 5     0 Throwbacks        4 Shaggy            It Wasn't…      227600 Hot Shot  \n 6     0 Throwbacks        5 Usher             Yeah!           250373 Confessio…\n 7     0 Throwbacks        6 Usher             My Boo          223440 Confessio…\n 8     0 Throwbacks        7 The Pussycat Dol… Buttons         225560 PCD       \n 9     0 Throwbacks        8 Destiny's Child   Say My Na…      271333 The Writi…\n10     0 Throwbacks        9 OutKast           Hey Ya! -…      235213 Speakerbo…\n# ℹ 197,995 more rows\n```\n:::\n:::\n\n\n## The Artists for the Ten Most Popular Songs\n\n\n::: {.cell}\n\n```{.r .cell-code}\nQ1a <- spotify_all %>% \n  arrange(-`duration_ms`) %>% \n  filter(playlist_name != \"Audiobooks\") %>% \n  slice_head(n = 10) %>% \n  select(`artist_name`)\n\nQ1a\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 1\n   artist_name          \n   <chr>                \n 1 Sound Dreamer        \n 2 Best of 9JA          \n 3 Late Night Tales     \n 4 Grandmaster Flash    \n 5 Brian Eno            \n 6 Reggae Mix USA       \n 7 Eric Thomas          \n 8 D.VELOPED            \n 9 Deftones             \n10 Jonathan David Helser\n```\n:::\n:::\n\n\n## The Five Most Common Artists in the Data Frame 🧑‍🎨\n\n\n::: {.cell}\n\n```{.r .cell-code}\nQ1b <- spotify_all %>% \n  group_by(`artist_name`) %>% \n  summarise(count = n()) %>% \n  arrange(-count) %>% \n  slice_head(n = 5)\n\nQ1b\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 2\n  artist_name    count\n  <chr>          <int>\n1 Drake           2715\n2 Kanye West      1065\n3 Kendrick Lamar  1035\n4 Rihanna          915\n5 The Weeknd       913\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = Q1b)+\n  geom_col(mapping = aes(x = artist_name,\n                             y = count,\n           color = artist_name))\n```\n\n::: {.cell-output-display}\n![](Spotify_Blog_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nAs we can see Drake is very Popular 🎵\n\n### Most popular songs by each of the 5 most popular artists\n\n\n::: {.cell}\n\n```{.r .cell-code}\nQ1b2 <- spotify_all %>% \n  group_by(`track_name`, `artist_name`) %>%\n  filter(`artist_name` %in% Q1b$artist_name) %>% \n  summarise(po_song = n()) %>% \n  arrange(-po_song)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'track_name'. You can override using the\n`.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nanswer <- Q1b2 %>% \n  group_by(`artist_name`) %>% \n  filter(po_song == max(po_song)) %>% \n  unite(Name_and_Track, track_name, artist_name, sep = \",\")\n\nanswer\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 2\n  Name_and_Track         po_song\n  <chr>                    <int>\n1 One Dance,Drake            143\n2 HUMBLE.,Kendrick Lamar     142\n3 Starboy,The Weeknd         100\n4 Gold Digger,Kanye West      83\n5 Needed Me,Rihanna           79\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = answer)+\n  geom_col(mapping = aes(x = Name_and_Track,\n                         y = po_song,\n  color = Name_and_Track))+\nylab(\"Song Occurences\")\n```\n\n::: {.cell-output-display}\n![](Spotify_Blog_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Spotify_Blog_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}